/*namespace Applicacao.Servicos;

using Applicacao.DTOs;
using Dominio.Interfaces;
using Dominio.Models;
using Dominio.Enums;


public class SvcUsuarioSistema
{

    private readonly IRepoUsuarioSistema _usuarioSistemaRepo;

    public SvcUsuarioSistema (IRepoUsuarioSistema usuarioSistemaRepo)
    {
        _usuarioSistemaRepo = usuarioSistemaRepo;
    }

    public async Task<bool> AutenticarUsuario(DtoUsuarioSistema dtoUsuarioSistema)
    {
        if (string.IsNullOrWhiteSpace(dtoUsuarioSistema.Senha)) throw new Exception("Senha precisa ter conteúdo");
        dtoUsuarioSistema.Busca = TipoDeBusca.PorEmail;

        var listUsuario = await Obter(dtoUsuarioSistema);
        var usuario = listUsuario.FirstOrDefault();

        if (usuario == null) throw new Exception("Usuário não encontrado");
        if (usuario.SenhaHash == null) throw new Exception("Senha não encontrada");

        return SvcCryptSenha.VerificarHash(dtoUsuarioSistema.Senha, usuario.SenhaHash);
    }
    public void CriarUsuario(DtoUsuarioSistema usuariodto)
    {
        if (usuariodto.Usuario == null) throw new Exception("Nome de usuario Obrigatório");
        if (usuariodto.Nome == null) throw new Exception("Nome obrigatório");
        if (usuariodto.Email == null) throw new Exception("Email obrigatório");
        if (usuariodto.Senha == null) throw new Exception("Senha obrigatório");

        if (usuariodto != null)
        {
            UsuarioSistema usuario = new UsuarioSistema
            (
                Nome: usuariodto.Nome,
                Usuario: usuariodto.Usuario,
                SenhaHash: usuariodto.Senha,
                Email: usuariodto.Email
            )
            {
                isAdministrador = usuariodto.isAdministrador,
                DataDeCadastro = usuariodto.DataDeCadastro
            };

            _usuarioSistemaRepo.CadastrarUsuario(usuario);
        }
    }
    public async Task<UsuarioSistema> EditarUsuario(DtoUsuarioSistema usuariodto)
    {

        if (usuariodto.Usuario == null) throw new Exception("Nome de usuario Obrigatório");
        if (usuariodto.Nome == null) throw new Exception("Nome obrigatório");
        if (usuariodto.Email == null) throw new Exception("Email obrigatório");
        if (usuariodto.Senha == null) throw new Exception("Senha obrigatório");

        UsuarioSistema usuarioExistente = await _usuarioSistemaRepo.ObterPorId(usuariodto.Id);


        if (usuarioExistente == null) throw new Exception("Usuário não encontrado");

        var usuario = SvcComparador.CompararObjetos<UsuarioSistema, DtoUsuarioSistema>(usuarioExistente, usuariodto);

        if (usuario) throw new Exception("Nenhuma alteração detectada");

        else
        {
            UsuarioSistema usuarioSistema = new UsuarioSistema
            (
            Nome: usuariodto.Nome,
            Usuario: usuariodto.Usuario,
            SenhaHash: usuariodto.Senha,
            Email: usuariodto.Email
            )
            {
            isAdministrador = usuariodto.isAdministrador,
            DataDeCadastro = usuariodto.DataDeCadastro
            };

            _usuarioSistemaRepo.EditarUsuario(usuarioSistema);

            return usuarioSistema;
        }
    }

    public void ExcluirUsuario(int id)
    {
        _usuarioSistemaRepo.ExcluirUsuario(id);
    }
    
public async Task<IEnumerable<UsuarioSistema>> Obter(DtoUsuarioSistema dto)
    {

        var usuarios = new List<UsuarioSistema>();

        switch (dto.Busca)
        {

            case TipoDeBusca.PorNome:

                if (string.IsNullOrWhiteSpace(dto.Nome)) throw new ArgumentException("Nome é obrigatório.");
                    usuarios = await _usuarioSistemaRepo.ObterPorNome(dto.Nome);
                break;

            case TipoDeBusca.PorUsuario:

                if (string.IsNullOrWhiteSpace(dto.Usuario)) throw new ArgumentException("Usuário é obrigatório.");
                var usuarioPorUsuario = await _usuarioSistemaRepo.ObterPorUsuario(dto.Usuario);
                if (usuarioPorUsuario != null) usuarios.Add(usuarioPorUsuario);
                break;

            case TipoDeBusca.PorEmail:

                if (string.IsNullOrWhiteSpace(dto.Email)) throw new ArgumentException("Email é obrigatório.");
                var usuarioPorEmail = await _usuarioSistemaRepo.ObterPorEmail(dto.Email);
                if (usuarioPorEmail != null) usuarios.Add(usuarioPorEmail);
                break;

            case TipoDeBusca.PorId:
                if (dto.Id <= 0) throw new ArgumentException("ID inválido.");
                var usuarioPorId = await _usuarioSistemaRepo.ObterPorId(dto.Id);
                if (usuarioPorId != null) usuarios.Add(usuarioPorId);
                break;

            case TipoDeBusca.PorDataDeCadastro:
                if (dto.DataDeCadastro == DateTime.MinValue) throw new ArgumentException("Data de cadastro é obrigatória.");
                usuarios = await _usuarioSistemaRepo.ObterPorDataDeCadastro(dto.DataDeCadastro.Date);
                break;

            case TipoDeBusca.PorPerfil:
                usuarios = await _usuarioSistemaRepo.ObterPorPerfil(dto.isAdministrador);
                break;

            case TipoDeBusca.Todos:
                usuarios = await _usuarioSistemaRepo.ObterTodos();
                break;

            default:
                throw new ArgumentException("Tipo de busca inválido.");
        }

        return usuarios;
    }
}
*/